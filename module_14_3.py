from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

api = ('')
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())


class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()


kb_1 = InlineKeyboardMarkup(row_width=4)
kb_1.add(InlineKeyboardButton(text='Product1', callback_data="product_buying"),
         InlineKeyboardButton(text='Product2', callback_data="product_buying"),
         InlineKeyboardButton(text='Product3', callback_data="product_buying"),
         InlineKeyboardButton(text='Product4', callback_data="product_buying"))

kb_2 = ReplyKeyboardMarkup()
start_menu = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π'),
                                           KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')],
                                           [KeyboardButton(text='–ö—É–ø–∏—Ç—å')]],
                                 resize_keyboard=True)


@dp.message_handler(text='–ö—É–ø–∏—Ç—å')
async def get_buying_list(message: types.Message):
    for i in range(1,5):
        with open(f'imeg14_3_{i}.jpg', 'rb') as img:
            await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: Product{i} | –û–ø–∏—Å–∞–Ω–∏–µ: –æ–ø–∏—Å–∞–Ω–∏–µ{i} | –¶–µ–Ω–∞: {i*100}')
            await message.answer_photo(photo=img)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', reply_markup=kb_1)


@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer('10 —Ö –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5')
    await call.answer()

@dp.callback_query_handler(text='product_buying')
async def send_confirm_message(call):
    await call.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!')
    await call.answer()

@dp.message_handler(text='/start')
async def start(message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é', reply_markup=start_menu)


@dp.message_handler(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π')
async def inform(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await UserState.age.set()


@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:')
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    await state.get_data()
    data = await state.get_data()
    age = int(data.get('age'))
    growth = int(data.get('growth'))
    weight = int(data.get('weight'))
    kal_ = 10 * weight + 6.25 * growth - 5 * age + 5
    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π {kal_}.')
    await state.finish()


@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def all_massages(message):
    await message.answer('–í –Ω–∞—à–µ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∞–¥—ã –∏ –≤–∏—Ç–∞–º–∏–Ω—ã, –∞ —Ç–∞–∫ –∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –í–∞—à—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.')


@dp.message_handler()
async def all_massages(message):
    await message.answer('üëâ/start')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
